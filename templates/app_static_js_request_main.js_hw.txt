characterCounter and generate_character_counter_handler handles displaying character counters for fields. If current amount of characters is out of the valid range of characters, the text color is red, otherwise black.
<br>regexURLChecker checks whether the url link inputted is value by using a regex expression; return true or false.
<br>notHolidayorWeekend checks whether the date inputted falls on a holiday or weekend.
<br>getRequestAgencyInstructions(): Additional information for an agency is hidden or displayed depending on the type of users.
<br>populateDropdown(): populates an empty dropdown and renders it
<br>renderCustomRequestForm(target): This function renders fields based on the target given; this function also restricts certain key pressed for when choosing data and time; fields are assigned character counters. Popovers and tooltips are assigned to the data fields for placement, trigger, toggle, and content. If the entire form is not displayed, additional content is shown; otherwise, hide the additional content.
<br>handleCategorySwitch handles creating a new form upon a category change. Counters are reset and added divs are removed.
<br>checkRequestTypeDropdowns() checks to ensure that the form has a selected type.
<br>processCustomRequestFormData(): The form is jsonified but if the number of completed fields does not meet the minimum requirement, an alert is displayed.

<h3>
Code Issues
</h3>

<ul class="review">
  <li>
  <code>updateCustomRequestFormDropdowns()</code> has 4 nested conditional statements for lines 403-428.
  <pre>
  <code>
    if (this.value !== "") { // if the dropdown is not empty execute this block
      $(requestTypeOptions).each(function () { // loop through each option in the dropdown
          if (this.text !== "" && this.text !== categoryDividerText) { // only update options that actually have text
              var originalText = originalFormNames[this.value]; // get the actual form name
              if (backwards[this.value] === 0) { // if there are no instances of the form keep the text at 0
                  if (showMultipleRequestTypes) {
                      $(this).text(originalText + " (" + (backwards[this.value]).toString() + " of " + maxRepeatable[this.value].toString() +  ")");
                  }
                  else {
                      $(this).text(originalText);
                  }
              }
              else { // use the following formula, maxRepeatable[this.value] - backwards[this.value] - repeatableCounter[this.value] + 1 to calculate what instance number is currently being processed
                  if (showMultipleRequestTypes) {
                      $(this).text(originalText + " (" + (maxRepeatable[this.value] - backwards[this.value] - repeatableCounter[this.value] + 1).toString() + " of " + maxRepeatable[this.value].toString() +  ")");
                  }
                  else { // use original text if only one custom form can display
                      $(this).text(originalText);
                  }
              }
              if (backwards[this.value] > 1) { // update the backwards counter for the next time you see the same form selected in another dropdown
                  backwards[this.value]--;
              }
          }
      });
  }
  </code>
  </pre>
  Recommend refactoring by using functions to reduce the amount of nested conditionals.
  </li>

  <li>
  <code>renderCustomRequestForm(target)</code> runs from lines 465 to 645. Recommend refactoring parts of the function, such as
  rendering datepicker and timepicker plugins, by taking those chunks fo code and placing them into separate functions.
  </li>

  <li>
  <code>if</code> statement runs from line 531 to 559.
  <pre>
  <code>
    if (e.keyCode !== 8 && // backspace
        e.keyCode !== 9 && // tab
        e.keyCode !== 37 && // left-arrow
        e.keyCode !== 39 && // right-arrow
        e.keyCode !== 48 && // 0
        e.keyCode !== 49 && // 1
        e.keyCode !== 50 && // 2
        e.keyCode !== 51 && // 3
        e.keyCode !== 52 && // 4
        e.keyCode !== 53 && // 5
        e.keyCode !== 54 && // 6
        e.keyCode !== 55 && // 7
        e.keyCode !== 56 && // 8
        e.keyCode !== 57 && // 9
        e.keyCode !== 96 && // num pad 0
        e.keyCode !== 97 && // num pad 1
        e.keyCode !== 98 && // num pad 2
        e.keyCode !== 99 && // num pad 3
        e.keyCode !== 100 && // num pad 4
        e.keyCode !== 101 && // num pad 5
        e.keyCode !== 102 && // num pad 6
        e.keyCode !== 103 && // num pad 7
        e.keyCode !== 104 && // num pad 8
        e.keyCode !== 105 && // num pad 9
        e.keyCode !== 16 && // Shift
        e.keyCode !== 65 && // a
        e.keyCode !== 77 && // m
        e.keyCode !== 80 && // p
        e.keyCode !== 186) {// semi-colon
  </code>
  </pre>Recommend refactoring this long conditional into a function that returns
  whether a valid key was pressed. An alternative would also be to have an array of invalid key codes and checking
  if the key code that was pressed is inside that array.
  </li>
</ul>
